//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: pahkat.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Pahkat_PahkatClient`, then call methods of this protocol to make API calls.
internal protocol Pahkat_PahkatClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Pahkat_PahkatClientInterceptorFactoryProtocol? { get }

  func notifications(
    _ request: Pahkat_NotificationsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Pahkat_NotificationResponse) -> Void
  ) -> ServerStreamingCall<Pahkat_NotificationsRequest, Pahkat_NotificationResponse>

  func refresh(
    _ request: Pahkat_RefreshRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pahkat_RefreshRequest, Pahkat_RefreshResponse>

  func status(
    _ request: Pahkat_StatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pahkat_StatusRequest, Pahkat_StatusResponse>

  func dependencyStatus(
    _ request: Pahkat_StatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pahkat_StatusRequest, Pahkat_DependencyStatusResponse>

  func repositoryIndexes(
    _ request: Pahkat_RepositoryIndexesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pahkat_RepositoryIndexesRequest, Pahkat_RepositoryIndexesResponse>

  func processTransaction(
    callOptions: CallOptions?,
    handler: @escaping (Pahkat_TransactionResponse) -> Void
  ) -> BidirectionalStreamingCall<Pahkat_TransactionRequest, Pahkat_TransactionResponse>

  func strings(
    _ request: Pahkat_StringsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pahkat_StringsRequest, Pahkat_StringsResponse>

  func resolvePackageQuery(
    _ request: Pahkat_JsonRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pahkat_JsonRequest, Pahkat_JsonResponse>

  func setRepo(
    _ request: Pahkat_SetRepoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pahkat_SetRepoRequest, Pahkat_SetRepoResponse>

  func getRepoRecords(
    _ request: Pahkat_GetRepoRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pahkat_GetRepoRecordsRequest, Pahkat_GetRepoRecordsResponse>

  func removeRepo(
    _ request: Pahkat_RemoveRepoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pahkat_RemoveRepoRequest, Pahkat_RemoveRepoResponse>
}

extension Pahkat_PahkatClientProtocol {
  internal var serviceName: String {
    return "pahkat.Pahkat"
  }

  /// Server streaming call to Notifications
  ///
  /// - Parameters:
  ///   - request: Request to send to Notifications.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func notifications(
    _ request: Pahkat_NotificationsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Pahkat_NotificationResponse) -> Void
  ) -> ServerStreamingCall<Pahkat_NotificationsRequest, Pahkat_NotificationResponse> {
    return self.makeServerStreamingCall(
      path: "/pahkat.Pahkat/Notifications",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNotificationsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to Refresh
  ///
  /// - Parameters:
  ///   - request: Request to send to Refresh.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func refresh(
    _ request: Pahkat_RefreshRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pahkat_RefreshRequest, Pahkat_RefreshResponse> {
    return self.makeUnaryCall(
      path: "/pahkat.Pahkat/Refresh",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefreshInterceptors() ?? []
    )
  }

  /// Store
  ///
  /// - Parameters:
  ///   - request: Request to send to Status.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func status(
    _ request: Pahkat_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pahkat_StatusRequest, Pahkat_StatusResponse> {
    return self.makeUnaryCall(
      path: "/pahkat.Pahkat/Status",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusInterceptors() ?? []
    )
  }

  /// Unary call to DependencyStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to DependencyStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dependencyStatus(
    _ request: Pahkat_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pahkat_StatusRequest, Pahkat_DependencyStatusResponse> {
    return self.makeUnaryCall(
      path: "/pahkat.Pahkat/DependencyStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDependencyStatusInterceptors() ?? []
    )
  }

  /// Unary call to RepositoryIndexes
  ///
  /// - Parameters:
  ///   - request: Request to send to RepositoryIndexes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func repositoryIndexes(
    _ request: Pahkat_RepositoryIndexesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pahkat_RepositoryIndexesRequest, Pahkat_RepositoryIndexesResponse> {
    return self.makeUnaryCall(
      path: "/pahkat.Pahkat/RepositoryIndexes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRepositoryIndexesInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to ProcessTransaction
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func processTransaction(
    callOptions: CallOptions? = nil,
    handler: @escaping (Pahkat_TransactionResponse) -> Void
  ) -> BidirectionalStreamingCall<Pahkat_TransactionRequest, Pahkat_TransactionResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/pahkat.Pahkat/ProcessTransaction",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessTransactionInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to Strings
  ///
  /// - Parameters:
  ///   - request: Request to send to Strings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func strings(
    _ request: Pahkat_StringsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pahkat_StringsRequest, Pahkat_StringsResponse> {
    return self.makeUnaryCall(
      path: "/pahkat.Pahkat/Strings",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStringsInterceptors() ?? []
    )
  }

  /// Unary call to ResolvePackageQuery
  ///
  /// - Parameters:
  ///   - request: Request to send to ResolvePackageQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resolvePackageQuery(
    _ request: Pahkat_JsonRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pahkat_JsonRequest, Pahkat_JsonResponse> {
    return self.makeUnaryCall(
      path: "/pahkat.Pahkat/ResolvePackageQuery",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolvePackageQueryInterceptors() ?? []
    )
  }

  /// CRUD for repositories
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRepo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRepo(
    _ request: Pahkat_SetRepoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pahkat_SetRepoRequest, Pahkat_SetRepoResponse> {
    return self.makeUnaryCall(
      path: "/pahkat.Pahkat/SetRepo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRepoInterceptors() ?? []
    )
  }

  /// Unary call to GetRepoRecords
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRepoRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRepoRecords(
    _ request: Pahkat_GetRepoRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pahkat_GetRepoRecordsRequest, Pahkat_GetRepoRecordsResponse> {
    return self.makeUnaryCall(
      path: "/pahkat.Pahkat/GetRepoRecords",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRepoRecordsInterceptors() ?? []
    )
  }

  /// Unary call to RemoveRepo
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveRepo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeRepo(
    _ request: Pahkat_RemoveRepoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pahkat_RemoveRepoRequest, Pahkat_RemoveRepoResponse> {
    return self.makeUnaryCall(
      path: "/pahkat.Pahkat/RemoveRepo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveRepoInterceptors() ?? []
    )
  }
}

internal protocol Pahkat_PahkatClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'notifications'.
  func makeNotificationsInterceptors() -> [ClientInterceptor<Pahkat_NotificationsRequest, Pahkat_NotificationResponse>]

  /// - Returns: Interceptors to use when invoking 'refresh'.
  func makeRefreshInterceptors() -> [ClientInterceptor<Pahkat_RefreshRequest, Pahkat_RefreshResponse>]

  /// - Returns: Interceptors to use when invoking 'status'.
  func makeStatusInterceptors() -> [ClientInterceptor<Pahkat_StatusRequest, Pahkat_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'dependencyStatus'.
  func makeDependencyStatusInterceptors() -> [ClientInterceptor<Pahkat_StatusRequest, Pahkat_DependencyStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'repositoryIndexes'.
  func makeRepositoryIndexesInterceptors() -> [ClientInterceptor<Pahkat_RepositoryIndexesRequest, Pahkat_RepositoryIndexesResponse>]

  /// - Returns: Interceptors to use when invoking 'processTransaction'.
  func makeProcessTransactionInterceptors() -> [ClientInterceptor<Pahkat_TransactionRequest, Pahkat_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'strings'.
  func makeStringsInterceptors() -> [ClientInterceptor<Pahkat_StringsRequest, Pahkat_StringsResponse>]

  /// - Returns: Interceptors to use when invoking 'resolvePackageQuery'.
  func makeResolvePackageQueryInterceptors() -> [ClientInterceptor<Pahkat_JsonRequest, Pahkat_JsonResponse>]

  /// - Returns: Interceptors to use when invoking 'setRepo'.
  func makeSetRepoInterceptors() -> [ClientInterceptor<Pahkat_SetRepoRequest, Pahkat_SetRepoResponse>]

  /// - Returns: Interceptors to use when invoking 'getRepoRecords'.
  func makeGetRepoRecordsInterceptors() -> [ClientInterceptor<Pahkat_GetRepoRecordsRequest, Pahkat_GetRepoRecordsResponse>]

  /// - Returns: Interceptors to use when invoking 'removeRepo'.
  func makeRemoveRepoInterceptors() -> [ClientInterceptor<Pahkat_RemoveRepoRequest, Pahkat_RemoveRepoResponse>]
}

internal final class Pahkat_PahkatClient: Pahkat_PahkatClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Pahkat_PahkatClientInterceptorFactoryProtocol?

  /// Creates a client for the pahkat.Pahkat service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pahkat_PahkatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

